df = pd.read_csv('SP500_16_19.csv')

class GARCH(object):
  def __init__(self, df, p, q):  
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    import scipy.optimize

    self.df = df
    self.p = p
    self.q = q

    self.df['logreturns'] = np.float32(0)
    for i in range(1, len(self.df)):
      self.df['logreturns'][i] = np.log(self.df['Adj Close'][i]/self.df['Adj Close'][i-1])


    self.df['daily_volatility'] = np.float32(0)
    lrs = self.df['logreturns'].values
    for i in range(max(self.p, self.q), len(self.df)):
      self.df['daily_volatility'][i] = (np.sum(lrs[:i-1]))/i

    self.returns = self.df['logreturns']
    self.volatility = self.df['daily_volatility']

    self.params = np.random.uniform(0,1,1+self.p+self.q)
    self.constraints = [{'type':'eq', 'fun': self.constraint1}, {'type':'ineq', 'fun': self.constraint2}]
    self.bounds = tuple([(0.0, 1.0)]*(1+self.p+self.q))

  
  def create_data(self):
    temp = []
    for i in range(max(self.p, self.q), len(df)):
      t = [1]
      for j in range(0, self.p):
        t.append((self.returns[i-j])**2)
      
      for k in range(0, self.q):
        t.append((self.volatility[i-1-k])**2)
      temp.append(t)
    self.data = np.asarray(temp)


  def cost_function(self, params):
    return np.sum(np.log(np.sum(self.params*self.data, axis=1)) + self.data[:, 1] / np.sum(self.params*self.data, axis=1))

  def constraint1(self, p):
    return np.sum(self.params) - 1

  def constraint2(self, p):
    return 1 - np.sum(self.params) + self.params[0]

  def get_coeff(self):
    solution = scipy.optimize.minimize(self.cost_function, self.params, method='SLSQP', bounds = self.bounds, constraints = self.constraints)
    return solution.x
    
    
    
    
spy = GARCH(df, 3,1)
spy.create_data()
spy.get_coeff()
